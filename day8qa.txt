Perfect! Here's a clean summary of **yesterday’s (Day 8) interview questions and your refined answers** across the five selected technologies:

---

### ✅ **Linux Interview Questions & Answers**

1. **What does the `ls -l` command show?**
   → Long listing of all files in the current directory with permissions, owner, size, and timestamp.

2. **How do you view the last 10 lines of a log file?**
   → `tail -10 filename.log`

3. **What is the difference between soft link and hard link?**
   → Soft link points to the file path; hard link points directly to file data blocks.

4. **How do you check current system memory usage?**
   → `free -h`

5. **What is the purpose of the `/etc/fstab` file?**
   → Defines filesystems to mount at boot time.

6. **How can you check which user is logged in and from where?**
   → `who` or `w`

7. **What is a zombie process? How do you find it?**
   → A defunct process whose parent hasn't read its exit status. Find using `ps aux | grep Z`.

8. **Explain `chmod 755 file.sh`.**
   → User: full access (rwx), Group & Others: read + execute.

9. **What does `ps aux | grep` do?**
   → Filters running processes by a keyword or command.

10. **How can you kill a process using its name?**
    → `pkill processname`

---

### ✅ **Git & GitHub Interview Questions & Answers**

1. **Difference between `git pull` and `git fetch`?**
   → `fetch` updates local refs but doesn’t merge. `pull` = `fetch` + `merge`.

2. **Undo the last commit but keep changes?**
   → `git reset --soft HEAD~1`

3. **What is a merge conflict, and how do you resolve it?**
   → Conflict when Git can't auto-merge changes. Manually edit and commit.

4. **What does `git stash` do?**
   → Temporarily shelves uncommitted changes.

5. **Use of `.gitignore`?**
   → Excludes files from version control.

6. **Difference between fork and clone in GitHub?**
   → Fork = copy repo to your GitHub; Clone = copy repo to local machine.

7. **What is HEAD in Git?**
   → Current branch reference (latest commit).

8. **How to create and switch to a new branch?**
   → `git checkout -b branchname`

9. **List all remote branches?**
   → `git branch -r`

10. **Detached HEAD state?**
    → HEAD pointing to a commit instead of a branch.

---

### ✅ **Docker Interview Questions & Answers**

1. **Difference between an image and a container?**
   → Image is blueprint; container is a running instance.

2. **What does `docker ps -a` show?**
   → All containers (running + stopped).

3. **Remove all stopped containers?**
   → `docker rm $(docker ps -a -q)`

4. **See logs from a running container?**
   → `docker logs container_name`

5. **Difference between `CMD` and `ENTRYPOINT`?**
   → `CMD`: default args; `ENTRYPOINT`: fixed binary or script.

6. **Build Docker image with a tag?**
   → `docker build -t name:tag .`

7. **Expose ports in a Docker container?**
   → Use `EXPOSE` in Dockerfile or `-p` in `docker run`.

8. **What does `docker exec` do?**
   → Run a command inside a running container.

9. **What happens when a container’s main process ends?**
   → The container stops.

10. **Use of `docker volume`?**
    → Persist and share data between container and host.

---

### ✅ **Ansible Interview Questions & Answers**

1. **Purpose of `ansible.cfg`?**
   → Ansible’s main configuration file.

2. **Specify remote user in a playbook?**
   → Use `remote_user: username` under play.

3. **Difference between `command` and `shell` modules?**
   → `command`: no shell features. `shell`: supports pipes, redirects.

4. **Register and use variable from a task?**
   → Use `register: varname`, access via `{{ varname.stdout }}` or similar.

5. **Loop through a list of packages?**

   ```yaml
   loop: "{{ pkg_list }}"
   ```

6. **Conditionally skip a task?**
   → Use `when:` with a condition.

7. **What are facts in Ansible?**
   → Collected system data; accessible as `ansible_facts`.

8. **Use of `ansible-pull`?**
   → Pull playbooks from a central repo and apply on the node.

9. **Test if a file exists?**
   → Use `stat` module and `when: stat_result.stat.exists`

10. **`notify` and `handlers` use?**
    → Notify triggers handlers only when the task changes.

---

### ✅ **GitHub Actions Interview Questions & Answers**

1. **What triggers a GitHub Actions workflow?**
   → Events like `push`, `pull_request`, etc., under `on:` key.

2. **What is a job in a workflow?**
   → A group of steps that run on the same runner.

3. **What does `runs-on` define?**
   → The OS runner environment (e.g., `ubuntu-latest`).

4. **How to use environment variables?**

   ```yaml
   env:
     VAR1: value
   ```

5. **Difference between `run` and `uses`?**
   → `run`: shell commands. `uses`: GitHub Actions from marketplace.

6. **What are GitHub Secrets?**
   → Encrypted variables accessed via `${{ secrets.NAME }}`.

7. **Reuse workflows across repositories?**
   → Use reusable workflows or templates.

8. **Matrix strategy in GitHub Actions?**
   → Run jobs in parallel for different OS/versions.

9. **Can one job depend on another?**
   → Yes, using `needs:` keyword.

10. **Use of `actions/checkout@v4`?**
    → Checks out the repo so subsequent steps can access the code.

---

Let me know when you're ready for **Day 9's questions** or want to jump into the practicals!
