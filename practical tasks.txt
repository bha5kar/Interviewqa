
---

### 🐧 **Linux**

1. Find all files larger than 10MB in `/var/log` and redirect output to `large_logs.txt`.
2. Use `find` and `xargs` to recursively change all file permissions to `644` and directory permissions to `755` in a folder.
3. Create a new group called `devgroup` and add a user `devuser` to it.
4. Use `nice` or `renice` on a sample background process like `sleep 1000`.
5. Monitor real-time logs of `/var/log/syslog` using `tail -f`.

---

### 🧱 **Git/GitHub**

1. Create 3 commits and squash them into a single commit using `git rebase -i`.
2. Rename a local branch and push it to remote with the new name.
3. Create a `.gitkeep` file in an empty folder and commit it.
4. Use `git revert` to undo a specific commit.
5. List all tags and create a tag `v1.0`, then push it to GitHub.

---

### 🐳 **Docker**

1. Create a simple Dockerfile using `alpine` that sets `CMD` to `echo "Container ready"`.
2. Override the `CMD` when running the container and print something else.
3. Run a container with host networking and confirm by checking the IP.
4. Commit a running container's changes into a new image.
5. Run `docker system prune` and document what it removed.

---

### ⚙️ **Ansible**

1. Write a playbook to check if `curl` is installed using the `stat` module and print accordingly using `debug`.
2. Use a loop to install packages: `vim`, `tree`, and `htop`.
3. Use `ansible_facts.packages` or simulated logic to conditionally run a task **only if one package is missing**.
4. Use `notify` and `handlers` to restart `nginx` when it’s installed.
5. Encrypt a variable using `ansible-vault` and use it in a playbook (optional if you're not ready).

---

### 🚀 **GitHub Actions**

1. Create a workflow that uses `env` to define 2 variables and prints them.
2. Use `GITHUB_ENV` to pass an env var from one step to another.
3. Create a simple matrix workflow that runs on `ubuntu-20.04` and `ubuntu-22.04`.
4. Add a condition: skip a step if a file `skip.txt` exists.
5. Trigger the workflow manually using `workflow_dispatch`.

---

Excellent catch — you’re absolutely right! ✅ The Day 11 Linux practicals you just mentioned **overlap with what you already submitted and completed earlier**. Let’s adjust to avoid repetition.

Here’s an updated, **fresh Day 11 practical set** for **only the remaining 4 technologies** (since you’ve already done Linux tasks):

---

## 🧱 **Git/GitHub**

1. Use `git stash` to temporarily save changes, switch branches, and then apply the stash.
2. Tag the latest commit with `v1.1` and push it to GitHub.
3. Remove the tag locally and remotely.
4. Use `git blame` on a file to see which commit last changed each line.
5. Create a `.gitignore` file to exclude all `.log` files and test it by adding a dummy `.log` file.

---

## 🐳 **Docker**

1. Build a Docker image with a `HEALTHCHECK` instruction.
2. Create a container with `--restart on-failure:3` policy and show how it behaves.
3. Limit the container’s memory to 128MB using `--memory`.
4. Create a multi-stage Dockerfile that compiles a dummy Go app (or just `COPY` a text file) and keeps the final image minimal.
5. Use `docker history` to inspect the image layer history.

---

## ⚙️ **Ansible**

1. Write a playbook with a task that retries up to 5 times if it fails.
2. Use `when` with a variable to skip a task conditionally.
3. Include a task file using `include_tasks`.
4. Use `ansible.builtin.command` module to run `hostname` on the remote host.
5. Use `delegate_to` with `localhost` to send a notification after finishing tasks on a remote host.

---

## 🚀 **GitHub Actions**

1. Create a workflow that prints the branch name it’s running on.
2. Use an environment secret (e.g., `MY_SECRET`) and print a masked message (don’t reveal the actual secret).
3. Write a step that runs on a custom shell (e.g., `pwsh`).
4. Add a job with a matrix that tests Python on versions 3.8 and 3.9.
5. Cancel a workflow from within itself using the GitHub REST API (advanced but optional — explore).

---

Would you like me to break these down with example commands or YAML snippets?

