Absolutely! Here's your **Day 10 Interview Q\&A Summary for All 5 Technologies**, with **your answers**, and **clarifying notes or explanations** where needed (especially for partially or unanswered ones). This is formatted for **clean copy-paste into your notes**.

---

## ✅ **Day 10 – DevOps Interview Q\&A Summary**

---

### 🐧 **Linux**

1. **How do you find which ports are listening on your system?**
   ✅ `netstat` or `ss -tuln`
   🔹 `netstat -tuln` shows TCP/UDP ports that are listening. Use `ss` instead on newer systems.

2. **What is the difference between `/var/log/syslog` and `/var/log/messages`?**
   ✅ Partially correct
   🔹 `/var/log/syslog`: logs everything, including user-level messages (Debian/Ubuntu)
   🔹 `/var/log/messages`: logs general system messages (RedHat/CentOS)

3. **How do you check disk inode usage?**
   ❌ You said `df -k`, but
   ✅ Correct command: `df -i`

4. **What is `ulimit` and how is it useful?**
   ❌ Not known
   🔹 `ulimit` controls user process limits like max open files, memory, etc.

5. **How do you check file permissions recursively in a directory?**
   🔹 `ls -lR /path/to/dir`

6. **What is the `nice` and `renice` command?**
   ❌ Not known
   🔹 `nice` starts a process with a priority
   🔹 `renice` changes priority of a running process

7. **How do you show processes sorted by memory usage?**
   🔹 `ps aux --sort=-%mem` or use `htop` and sort by memory

8. **What is the difference between `find` and `locate`?**
   ✅ Correct
   🔹 `find` searches in real-time
   🔹 `locate` uses a prebuilt database (`updatedb`)

9. **How do you monitor real-time logs of a file?**
   🔹 `tail -f /var/log/syslog`

10. **How do you recursively `chmod` files to 644 and directories to 755?**
    🔹

```bash
find . -type d -exec chmod 755 {} \;
find . -type f -exec chmod 644 {} \;
```

---

### 🧱 **Git/GitHub**

1. **How do you remove the last commit from a branch and discard changes?**
   🔹 `git reset --hard HEAD~1`

2. **How can you rename a branch both locally and remotely?**
   🔹

   ```bash
   git branch -m oldname newname
   git push origin newname
   git push origin --delete oldname
   ```

3. **How do you resolve and continue a rebase after fixing conflicts?**
   🔹 After resolving:

   ```bash
   git add .
   git rebase --continue
   ```

4. **What is a submodule in Git?**
   🔹 A separate Git repo inside your main repo – used to track external projects.

5. **How do you revert a file to the version from another branch?**
   🔹

   ```bash
   git checkout otherbranch -- path/to/file
   ```

6. **How do you list all tags in a repository?**
   🔹 `git tag`

7. **What is the difference between `origin` and `upstream`?**
   🔹 `origin` = your fork or primary remote
   🔹 `upstream` = original repo you forked from

8. **How do you pull only a specific commit from a remote branch?**
   ❌ Not known
   🔹 Use `cherry-pick`:

   ```bash
   git fetch origin
   git cherry-pick <commit-hash>
   ```

9. **How can you prevent committing secrets into Git?**
   🔹 Add to `.gitignore`, use tools like [git-secrets](https://github.com/awslabs/git-secrets), or GitHub push protection

10. **How do you temporarily ignore changes to a tracked file?**
    🔹

```bash
git update-index --assume-unchanged <file>
```

---

### 🐳 **Docker**

1. **How do you commit changes to a running container as a new image?**
   ❌ You didn’t know
   🔹

   ```bash
   docker commit <container-id> new-image-name
   ```

2. **What does `docker system prune` do?**
   ❌ Partially known
   🔹 Removes *all unused* containers, networks, images, and build cache

   ```bash
   docker system prune -a
   ```

3. **How do you create a volume and mount it in a container?**
   ✅ Partially correct
   🔹

   ```bash
   docker volume create myvol
   docker run -v myvol:/app/data image-name
   ```

4. **What is the difference between `ENTRYPOINT` and `CMD` in Dockerfile?**
   ✅ Mostly correct
   🔹 `ENTRYPOINT` = fixed start point
   🔹 `CMD` = default args, overridable at runtime

5. **How do you override CMD at container runtime?**
   ✅ Correct
   🔹 Add the new command at the end of `docker run`

6. **How do you limit the number of restarts using a restart policy?**
   ❌ Not known
   🔹

   ```bash
   docker run --restart=on-failure:3 ...
   ```

7. **How do you set environment variables in a Dockerfile?**
   ❌ Not known
   🔹 Use `ENV`

   ```dockerfile
   ENV MY_VAR=value
   ```

8. **What is the `HEALTHCHECK` instruction in Dockerfile?**
   ❌ Not known
   🔹 Monitors container health

   ```dockerfile
   HEALTHCHECK CMD curl --fail http://localhost || exit 1
   ```

9. **How do you run a container with host networking?**
   ❌ Not known
   🔹

   ```bash
   docker run --network host ...
   ```

10. **What’s the difference between `docker stop` and `docker kill`?**
    ✅ Correct
    🔹 `stop` = graceful shutdown
    🔹 `kill` = immediate termination (SIGKILL)

---

### ⚙️ **Ansible**

1. **What is the difference between `copy` and `template` modules?**
   ❌ You didn’t know `template`
   🔹 `copy` = plain file
   🔹 `template` = Jinja2-rendered dynamic file

2. **How do you encrypt passwords or variables in Ansible?**
   ❌ Not known
   🔹 Use `ansible-vault encrypt vars.yml`

3. **What are Ansible vaults, and how do you use them?**
   ✅ You knew this well
   🔹 `ansible-vault encrypt/decrypt/view/edit <file>`

4. **How do you include a role in a playbook?**
   ❌ Not known
   🔹

   ```yaml
   roles:
     - myrole
   ```

5. **How do you test if a service is running on a remote host?**
   ❌ Partial guess
   🔹 Use `service` or `systemd` module

   ```yaml
   service:
     name: nginx
     state: started
   ```

6. **What is the purpose of `delegate_to` in a task?**
   ❌ Not known
   🔹 Run a task on a different host than the one in `hosts`

7. **How can you retry a failed task?**
   ❌ Not known
   🔹 Use `retries` and `delay`

   ```yaml
   retries: 3  
   delay: 5
   ```

8. **How do you override a variable at runtime?**
   ❌ Not known
   🔹 Use `-e` flag

   ```bash
   ansible-playbook site.yml -e var=value
   ```

9. **What does the `ansible.builtin.set_fact` module do?**
   ❌ Not known
   🔹 Dynamically creates variables during a playbook run

10. **What’s the difference between `ansible-playbook` and `ansible` commands?**
    ✅ Correct
    🔹 `ansible-playbook` = run YAML playbooks
    🔹 `ansible` = run ad-hoc single tasks

---

### 🚀 **GitHub Actions**

1. **How do you pass an output from one step to another?**
   ❌ Not done before
   🔹 Use `id` in step 1, then `outputs.<id>` in step 2

2. **What are reusable workflows and how do you call them?**
   ✅ Correct
   🔹 Use `workflow_call` and reference them from another repo/workflow

3. **How do you define a matrix job with multiple versions of Node.js?**
   ✅ Correct
   🔹 Use `strategy.matrix.node: [14, 16, 18]`

4. **What is the role of `default` in GitHub Actions?**
   ❌ Not known
   🔹 Define default `env`, `shell`, or `run` values at job level

5. **How do you define a custom shell in a step?**
   ✅ Correct
   🔹

   ```yaml
   shell: bash
   ```

6. **What are the different types of contexts in GitHub Actions?**
   ❌ Not known
   🔹 Examples: `github`, `env`, `job`, `steps`, `runner`

7. **How do you write conditional expressions in workflows?**
   ❌ Not known
   🔹 Example:

   ```yaml
   if: github.ref == 'refs/heads/main'
   ```

8. **What is `GITHUB_WORKSPACE` and when is it used?**
   ❌ Not known
   🔹 It’s the directory on the runner where your repo is checked out

9. **How do you store data between workflow runs?**
   ❌ Not known
   🔹 Use `upload-artifact` and `download-artifact`

10. **How do you cancel a workflow from within itself?**
    ❌ Not known
    🔹 Use GitHub REST API + a token to call `cancel-workflow-run`

---

Would you like to go ahead with **Day 10 Practical Challenges** for these 5 techs now?
